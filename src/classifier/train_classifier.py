"""
Train_classifier will load the training and testing
data, build the neural network graph, then train. It will
return and save the model as a .h5 file
"""
import os
from pathlib import Path
# import random
import argparse
import matplotlib.pyplot as plt
# import numpy as np
# import keras
# import cv2
from keras.models import load_model
from keras.callbacks import History
from keras.preprocessing.image import ImageDataGenerator
import model

HISTORY = History()
HEIGHT = 224
WIDTH = 224
DIVISION = 10
BATCH_SIZE = 50
EPOCHS = 10


def create_feed_data(directory, text_no):
    """
    Create batchs of feeding data by going directly
    to the images. Labels are generated by the file
    structure.
    INPUT: Directory of images. The directory should
    be structured as below:
    Parent
    |- Training
    |   |- Label
    |       |- Image
    |- Testing
        |- Label
            |- Image
    OUTPUT: keras training and validation generators
    """
    # Dimensions of the images
    img_width, img_height = WIDTH, HEIGHT

    # Directory of the images
    train_data_dir = directory + 'subset_' + str(text_no) + '/training'
    test_data_dir = directory + 'subset_' + str(text_no) + '/testing'

    # Obtain the number of images in the directory
    no_train_samples = 0
    for root, dirs, files in os.walk(train_data_dir):
        no_train_samples += len(files)

    no_test_samples = 0
    for root, dirs, files in os.walk(test_data_dir):
        no_test_samples += len(files)

    # Data augmentation
    train_datagen = ImageDataGenerator(
        rescale=1. / 255.,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
    test_datagen = ImageDataGenerator(rescale=1. / 255)

    # Flow the images directly from the directory
    train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(img_width, img_height),
        color_mode="grayscale",
        batch_size=BATCH_SIZE,
        class_mode='categorical')
    test_generator = test_datagen.flow_from_directory(
        test_data_dir,
        target_size=(img_width, img_height),
        color_mode="grayscale",
        batch_size=BATCH_SIZE,
        class_mode='categorical')

    return train_generator, test_generator, no_train_samples, no_test_samples


def build_model():
    """Build the Keras neural network"""
    print("> Building Keras neural network...")
    network_model = model.VGG16_Char()
    return network_model


def fit_model(model, train_gen, test_gen, no_train, no_test, name):
    """
    Train the neural network with batch size of 200, 100 epochs,
    and print out training progress.
    """
    model.fit_generator(
        train_gen,
        steps_per_epoch=no_train // BATCH_SIZE,
        epochs=EPOCHS,
        validation_data=test_gen,
        validation_steps=no_test // BATCH_SIZE
    )

    model.save(name)
    return model


def plot(model, setting, count):
    """Plot the accuracy and loss of training"""
    fig = setting + '_' + str(count) + '_graph.png'
    if setting == "accuracy":
        plt.plot(model.History['acc'])
        plt.plot(model.History['val_acc'])
        plt.title('Model Accuracy')
        plt.ylabel('Accuracy')
    elif setting == "loss":
        plt.plot(model.History['loss'])
        plt.plot(model.History['val_loss'])
        plt.title('Model Loss')
        plt.ylabel('Loss')

    plt.xlabel('Epoch')
    plt.legend(['Training', 'Testing'], loc='upper left')
    plt.savefig(fig)


if __name__ == "__main__":
    # Build up the argument to bring in an image
    AP = argparse.ArgumentParser()
    AP.add_argument("-d", "--directory", help="path to dataset")
    AP.add_argument("-t", "--text", help="path to text_file")
    ARGS = vars(AP.parse_args())

    #############################
    # Feed Test
    #############################
    MODEL_NAME = 'model_62char.h5'
    DIRECTORY = ARGS['directory']
    MODEL_DIRECTORY = os.path.join(DIRECTORY, MODEL_NAME)

    COUNT = 0
    while COUNT < DIVISION:
        TRAIN_GEN, TEST_GEN, NO_TRAIN, NO_TEST = create_feed_data(DIRECTORY,
                                                                  COUNT)
        # create_feed_data(DIRECTORY, COUNT)
        MODEL_FILE = Path(MODEL_DIRECTORY)
        if MODEL_FILE.is_file():
            CHAR_MODEL = load_model(MODEL_DIRECTORY)
            HISTORY = fit_model(CHAR_MODEL,
                                TRAIN_GEN,
                                TEST_GEN,
                                NO_TRAIN,
                                NO_TEST,
                                MODEL_DIRECTORY)
            # plot(history, "accuracy", COUNT)
            # plot(history, "loss", COUNT)
        else:
            CHAR_MODEL = build_model()
            HISTORY = fit_model(CHAR_MODEL,
                                TRAIN_GEN,
                                TEST_GEN,
                                NO_TRAIN,
                                NO_TEST,
                                MODEL_DIRECTORY)
            # plot(history, "accuracy", COUNT)
            # plot(history, "loss", COUNT)
        COUNT += 1
